---
# run with:
# cd /opt/meza/ansible
# sudo -u meza-ansible ansible-playbook deploy.yml

# FIXME #729: Move this into a role
- hosts: localhost
  become: yes
  tasks:

  #
  # Can't run set-vars yet, so bootstrap m_home and m_config_vault for now.
  # Meza install path retrieved in same way in set-vars role
  #
  - name: Get Meza install path
    shell: "dirname $(dirname $(dirname $(dirname $(realpath $(which meza)))))"
    register: ip
  - set_fact:
      m_home: "{{ ip.stdout }}/conf-meza/users"
      m_config_vault: "{{ ip.stdout }}/conf-meza/vault"
      m_conf_dir: "{{ ip.stdout }}/conf-meza"

  - name: Ensure no password on meza-ansible user on controller
    shell: passwd --delete meza-ansible
    failed_when: False

  - name: Ensure controller has user alt-meza-ansible
    user:
      name: alt-meza-ansible
      move_home: yes
      home: "{{ m_home }}/alt-meza-ansible"
      # primary group
      group: wheel

  - name: Ensure user alt-meza-ansible .ssh dir configured
    file:
      path: "{{ m_home }}/alt-meza-ansible/.ssh"
      owner: alt-meza-ansible
      group: wheel
      mode: 0700
      state: directory

  - name: Copy meza-ansible keys to alt-meza-ansible
    copy:
      src: "{{ m_home }}/meza-ansible/.ssh/{{ item.name }}"
      dest: "{{ m_home }}/alt-meza-ansible/.ssh/{{ item.name }}"
      owner: alt-meza-ansible
      group: wheel
      mode: "{{ item.mode }}"
    with_items:
    - name: id_rsa
      mode: "0600"
    - name: id_rsa.pub
      mode: "0644"

  - name: Copy meza-ansible known_hosts to alt-meza-ansible
    copy:
      src: "{{ m_home }}/meza-ansible/.ssh/{{ item.name }}"
      dest: "{{ m_home }}/alt-meza-ansible/.ssh/{{ item.name }}"
      owner: alt-meza-ansible
      group: wheel
      mode: "{{ item.mode }}"
    failed_when: False
    with_items:
    - name: known_hosts
      mode: "0600"

  # Note: without this, if the user decides to encrypt secret.yml with Ansible
  # vault then it changes mode to 0600 and ownership to root:root. This makes it
  # impossible to include_vars later.
  - name: Ensure secret.yml owned by meza-ansible
    file:
      path: "{{ m_conf_dir }}/secret/{{ env }}/secret.yml"
      owner: meza-ansible
      group: wheel
      mode: "0660"

  - name: "Ensure {{ m_conf_dir }} owned by meza-ansible"
    file:
      path: "{{ m_conf_dir }}"
      owner: meza-ansible
      group: wheel
      mode: "0755"

# Set umask on all servers. Perhaps this should move above localhost steps since
# it may impact them, and role "umask-set" has no config requirements
- hosts: all:!exclude-all:!load-balancers-nonmeza:!load-balancers-nonmeza-external:!load-balancers-nonmeza-internal
  become: yes
  roles:
    - umask-set

# Ensure proper base setup on all servers in inventory, with the exception of
# servers in "exclude-all" group. At present, the intent of this group is to
# allow servers which serve as sources for database and user-uploaded files,
# but are not managed by this meza install.
- hosts: all:!exclude-all:!load-balancers-nonmeza:!load-balancers-nonmeza-external:!load-balancers-nonmeza-internal
  become: yes
  roles:
    - set-vars
    - base
    - base-config-scripts
  tags: base

- hosts: app-servers
  become: yes
  tags: apache-php
  roles:
    - set-vars
    - role: firewall_port
      firewall_action: open
      firewall_port: 8080
      firewall_protocol: tcp
      firewall_servers: "{{ load_balancers_all }}"
      firewall_zone: "{{m_private_networking_zone|default('public')}}"
    - apache-php
    - role: netdata
      when: m_install_netdata
    - role: firewall_port
      firewall_action: open
      firewall_port: 19999
      firewall_protocol: tcp
      firewall_servers: "{{ load_balancers_all }}"
      firewall_zone: "{{m_private_networking_zone|default('public')}}"

- hosts: backup-servers
  become: yes
  tags: backup-servers
  roles:
    - set-vars
    - backup-config

# Note: this is app-servers again, but must be after everything else is setup
- hosts: app-servers
  become: yes
  tags: mediawiki
  roles:
    - set-vars
    - htdocs
    - role: lua
      when: m_install_lua
    - mediawiki

- hosts: backup-servers
  become: yes
  tags:
    - backup-cleanup
  roles:
    - set-vars
    - role: backups-cleanup
      when: backups_cleanup is defined and backups_cleanup.crontime is defined

- hosts: all:!exclude-all:!load-balancers-nonmeza:!load-balancers-nonmeza-external:!load-balancers-nonmeza-internal
  become: yes
  tags:
    - cron
    - always
  roles:
    - set-vars
    - role: cron
      when: docker_skip_tasks is not defined or not docker_skip_tasks
    - umask-unset

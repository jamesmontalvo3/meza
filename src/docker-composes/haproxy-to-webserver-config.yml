---
# FIXME #748: Eventually add the ability to get SSL cert from letsencrypt
#     ref: https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-centos-7
# Other refs:
#     https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Load_Balancer_Administration/install_haproxy_example1.html
#     https://gist.github.com/thisismitch/7c91e9b2b63f837a0c4b
#     https://www.unixmen.com/configure-high-available-load-balancer-haproxy-keepalived/


- name: Set fact if this load balancer will handle external connections (80/443)
  set_fact:
    load_balancer_handle_external: True
  when: >
    (
      'load-balancers' in groups
      and inventory_hostname in groups['load-balancers']
    ) or (
      'load-balancers-meza-external' in groups
      and inventory_hostname in groups['load-balancers-meza-external']
    )

- name: Set fact if this load balancer will NOT handle external connections
  set_fact:
    load_balancer_handle_external: False
  when: >
    not (
      (
        'load-balancers' in groups
        and inventory_hostname in groups['load-balancers']
      ) or (
        'load-balancers-meza-external' in groups
        and inventory_hostname in groups['load-balancers-meza-external']
      )
    )

- name: Set fact if this load balancer will handle internal connections
  set_fact:
    load_balancer_handle_internal: True
  when: >
    (
      'load-balancers' in groups
      and inventory_hostname in groups['load-balancers']
    ) or (
      'load-balancers-meza-internal' in groups
      and inventory_hostname in groups['load-balancers-meza-internal']
    )

- name: Set fact if this load balancer will NOT handle internal connections
  set_fact:
    load_balancer_handle_internal: False
  when: >
    not (
      (
        'load-balancers' in groups
        and inventory_hostname in groups['load-balancers']
      ) or (
        'load-balancers-meza-internal' in groups
        and inventory_hostname in groups['load-balancers-meza-internal']
      )
    )


- name: Install haproxy packages
  package:
    name:
      - haproxy
      - openssl
      # - keepalived ?
    state: latest

- name: Ensure haproxy certs directory exists
  file:
    path: /etc/haproxy/certs
    state: directory
    # owner/group/mode?

#
# 1. If cert/key don't exist ON CONTROLLER, generate self-signed ON CONTROLLER
# 2. Ensure cert and key in /etc/haproxy/certs
# 3. Ensure cert and key assembled into pem file at /etc/haproxy/certs/meza.pem
#
- name: Check if secret config on CONTROLLER has SSL keys
  stat:
    path: "{{ m_local_secret }}/{{ env }}/ssl/meza.key"
  register: ssl_cert_stat_result
  delegate_to: localhost
  run_once: True

- name: Ensure config SSL directory exists
  file:
    path: "{{ m_local_secret }}/{{ env }}/ssl"
    state: directory
    owner: "{{ m_config_secret_owner }}"
    group: "{{ m_config_secret_group }}"
    mode: "{{ m_config_secret_dir_mode }}"
  delegate_to: localhost
  run_once: True

# FIXME: Better would be "if not exists setup letsencrypt"
- name: If not exists, create self-signed SSL cert on CONTROLLER
  command: |
    openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 \
      -subj "/C=US/ST=TX/L=Houston/O=EnterpriseMediaWiki/CN={{ wiki_app_fqdn}}" \
      -keyout {{ m_local_secret }}/{{ env }}/ssl/meza.key \
      -out {{ m_local_secret }}/{{ env }}/ssl/meza.crt
  when: ssl_cert_stat_result.stat.exists == False
  delegate_to: localhost
  run_once: True

- name: Ensure SSL cert and key are encrypted
  shell: >
    ansible-vault encrypt
    {{ item }}
    --vault-password-file {{ m_config_vault }}/vault-pass-{{ env }}.txt
  failed_when: False
  delegate_to: localhost
  run_once: True
  with_items:
    - "{{ m_local_secret }}/{{ env }}/ssl/meza.key"
    - "{{ m_local_secret }}/{{ env }}/ssl/meza.crt"

- name: Read SSL key into variable
  shell: >
    ansible-vault view
    {{ m_local_secret }}/{{ env }}/ssl/meza.key
    --vault-password-file {{ m_config_vault }}/vault-pass-{{ env }}.txt
  register: decrypted_key
  delegate_to: localhost
  run_once: True

- name: Read SSL cert into variable
  shell: >
    ansible-vault view
    {{ m_local_secret }}/{{ env }}/ssl/meza.crt
    --vault-password-file {{ m_config_vault }}/vault-pass-{{ env }}.txt
  register: decrypted_cert
  delegate_to: localhost
  run_once: True

# - name: Ensure cert and key on load balancers
#   copy:
#     src: "{{ m_local_secret }}/{{ env }}/ssl/{{ item }}"
#     dest: "/etc/haproxy/certs/{{ item }}"
#   with_items:
#     - meza.key
#     - meza.crt
#   notify:
#     - restart haproxy

- name: Ensure SSL cert on load balancers
  copy:
    content: "{{ decrypted_cert.stdout }}"
    dest: "/etc/haproxy/certs/meza.crt"
  notify:
    - restart haproxy

- name: Ensure SSL key on load balancers
  copy:
    content: "{{ decrypted_key.stdout }}"
    dest: "/etc/haproxy/certs/meza.key"
  notify:
    - restart haproxy

- name: Ensure cert and key assembled into into pem file
  copy:
    content: |
      {{ decrypted_cert.stdout }}
      {{ decrypted_key.stdout }}
    dest: /etc/haproxy/certs/meza.pem
  notify:
    - restart haproxy

# - name: Ensure cert and key assembled into into pem file
#   assemble:
#     src: "/opt/conf-meza/secret/{{ env }}/ssl"
#     dest: /etc/haproxy/certs/meza.pem
#   notify:
#     - restart haproxy

- name: Ensure haproxy certs have secure permissions
  file:
    path: /etc/haproxy/certs
    state: directory
    recurse: yes
    owner: root
    group: root
    mode: 0600
  notify:
    - restart haproxy

- name: write the haproxy config file
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  notify:
    - restart haproxy

# - name: Ensure haproxy socket directory exists
#   file:
#     path: /run/haproxy
#     state: directory
#     owner: root
#     group: root
#     mode: 0660


- name: Ensure error files directory in place
  file:
    path: /etc/haproxy/errors
    state: directory
    # FIXME #530: permissions?


- name: Ensure error pages in place
  template:
    src: "errors/{{ item }}.http.j2"
    dest: "/etc/haproxy/errors/{{ item }}.http"
  with_items:
    # FIXME #663: add the others, make the 500 error one good
    # - 400
    # - 403
    # - 408
    - 500
    # - 502
    # - 503
    # - 504



# FIXME #746: Why does HAProxy specify this different method for firewall? Is
# it an SELinux thing (which at present we don't have in enforcing)?
- name: Ensure firewalld haproxy service files in place
  template:
    src: "haproxy-{{ item }}.firewalld.xml.j2"
    dest: "/etc/firewalld/services/haproxy-{{ item }}.xml"
    owner: root
    group: root
    mode: 0644
  with_items:
    - http
    - https
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['load-balancers'] or inventory_hostname in groups['load-balancers-meza-external']


- name: Ensure SELinux context for firewalld haproxy service files
  shell: restorecon /etc/firewalld/services/haproxy-{{ item }}.xml
  with_items:
    - http
    - https
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['load-balancers'] or inventory_hostname in groups['load-balancers-meza-external']


# Allow http and https through firewall
#- name: Configure firewalld for haproxy via {{ item }}
#  firewalld:
#    service: "haproxy-{{ item }}"
#    permanent: true
#    immediate: true
#    state: enabled
#    zone: public
#  with_items:
#    - http
#    - https

- name: Create list of ports to open to the world
  set_fact:
    fully_open_ports:
      - 80
      - 443

- name: Add port 20000 to world-accessible list if installing netdata
  set_fact:
    fully_open_ports: "{{ fully_open_ports }} + [ 20000 ]"
  when: m_install_netdata

- name: Ensure port {{ fully_open_ports | join(', ') }} open to the world for haproxy
  include_role:
    name: firewall_port
  vars:
    firewall_action: open
    firewall_port: "{{ item }}"
    firewall_protocol: tcp
    firewall_zone: "{{m_private_networking_zone|default('public')}}"
  with_items: "{{ fully_open_ports }}"
  when:
      # only external load balancers
    - load_balancer_handle_external
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - firewall_skip_tasks is not defined or not firewall_skip_tasks
    - >
      ('load-balancers' in groups and inventory_hostname in groups['load-balancers'])
      or
      ('load-balancers-meza-external' in groups and inventory_hostname in groups['load-balancers-meza-external'])


- name: Ensure firewall port 1936 OPEN when haproxy stats ENABLED
  include_role:
    name: firewall_port
  vars:
    firewall_action: open
    firewall_port: 1936
    firewall_protocol: tcp
    firewall_zone: "{{m_private_networking_zone|default('public')}}"
  when:
    - enable_haproxy_stats
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - firewall_skip_tasks is not defined or not firewall_skip_tasks

- name: Ensure firewall port 1936 CLOSED when haproxy stats DISABLED
  include_role:
    name: firewall_port
  vars:
    firewall_action: close
    firewall_port: 1936
    firewall_protocol: tcp
    firewall_zone: "{{m_private_networking_zone|default('public')}}"
  when:
    - not enable_haproxy_stats
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - firewall_skip_tasks is not defined or not firewall_skip_tasks

- name: Ensure firewall port 8088 OPEN when PHP profiling ENABLED
  include_role:
    name: firewall_port
  vars:
    firewall_action: open
    firewall_port: 8088
    firewall_protocol: tcp
    firewall_zone: "{{m_private_networking_zone|default('public')}}"
  when:
    - m_setup_php_profiling
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - firewall_skip_tasks is not defined or not firewall_skip_tasks

- name: Ensure firewall port 8088 CLOSED when PHP profiling DISABLED
  include_role:
    name: firewall_port
  vars:
    firewall_action: close
    firewall_port: 8088
    firewall_protocol: tcp
    firewall_zone: "{{m_private_networking_zone|default('public')}}"
  when:
    - not m_setup_php_profiling
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - firewall_skip_tasks is not defined or not firewall_skip_tasks


# FIXME #747: haproxy will need to handle reverse proxy for Elasticsearch plugins
# - name: Configure firewalld for Elasticsearch reverse proxy
#   firewalld:
#     port: 8008/tcp
#     permanent: true
#     immediate: true
#     state: enabled
#     zone: public


- name: Uncomment '$ModLoad imudp' in /etc/rsyslog.conf
  replace:
    dest: /etc/rsyslog.conf
    regexp: '^#\$ModLoad imudp'
    replace: '$ModLoad imudp'
  notify:
    - restart rsyslog

- name: Uncomment '$UDPServerRun 514' in /etc/rsyslog.conf
  replace:
    dest: /etc/rsyslog.conf
    regexp: '^#\$UDPServerRun 514'
    replace: '$UDPServerRun 514'
  notify:
    - restart rsyslog

- name: Ensure /etc/rsyslog.d/haproxy.conf configured
  template:
    src: haproxy.rsyslog.conf.j2
    dest: /etc/rsyslog.d/haproxy.conf
  notify:
    - restart rsyslog


- name: ensure haproxy is running (and enable it at boot)
  service:
    name: haproxy
    state: started
    enabled: yes
  when: docker_skip_tasks is not defined or not docker_skip_tasks
